<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AsyncCallInsideUsingBlockDescription" xml:space="preserve">
    <value />
  </data>
  <data name="AsyncCallInsideUsingBlockMessageFormat" xml:space="preserve">
    <value>{0}, a disposable object, is used in a fire &amp; forget async call in an using block, causing potential exception error or wrong result.</value>
  </data>
  <data name="AsyncCallInsideUsingBlockTitle" xml:space="preserve">
    <value>Fire &amp; forget async call inside a using block</value>
  </data>
  <data name="AsyncVoidDescription" xml:space="preserve">
    <value />
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="AsyncVoidFixerTitle" xml:space="preserve">
    <value>Convert void to Task</value>
  </data>
  <data name="AsyncVoidMessageFormat" xml:space="preserve">
    <value>Avoid unsupported fire &amp; forget async void methods or delegates. Unhandled exceptions will crash the process.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="AsyncVoidTitle" xml:space="preserve">
    <value>Fire &amp; forget async void methods or delegates</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="BlockingCallInsideAsyncDescription" xml:space="preserve">
    <value />
  </data>
  <data name="BlockingCallInsideAsyncFixerTitle" xml:space="preserve">
    <value>Insert Async Call</value>
  </data>
  <data name="BlockingCallInsideAsyncMessageFormat" xml:space="preserve">
    <value>{0} should be used instead of {1}.</value>
  </data>
  <data name="BlockingCallInsideAsyncTitle" xml:space="preserve">
    <value>Long-running or blocking operations inside an async method</value>
  </data>
  <data name="NestedTaskToOuterTaskDescription" xml:space="preserve">
    <value />
  </data>
  <data name="NestedTaskToOuterTaskMessageFormat" xml:space="preserve">
    <value>Downcasting from a nested task (Task&lt;Task&gt;) to a outer task or awaiting a nested task is occurred. UnWrap() is suggested.</value>
  </data>
  <data name="NestedTaskToOuterTaskTitle" xml:space="preserve">
    <value>Downcasting from a nested task to an outer task.</value>
  </data>
  <data name="UnnecessaryAsyncDescription" xml:space="preserve">
    <value>Await is the last statement of the method so you can return Task and await in the caller method.</value>
  </data>
  <data name="UnnecessaryAsyncFixerTitle" xml:space="preserve">
    <value>Remove async/await</value>
  </data>
  <data name="UnnecessaryAsyncMessageFormat" xml:space="preserve">
    <value>The method '{0}' does not need to use async/await.</value>
  </data>
  <data name="UnnecessaryAsyncTitle" xml:space="preserve">
    <value>Unnecessary async/await usage</value>
  </data>
</root>